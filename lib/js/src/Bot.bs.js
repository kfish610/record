// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Process = require("process");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Data$Record = require("./Data.bs.js");
var IsomorphicWs = require("isomorphic-ws");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

Belt_Debug.setupChromeDebugger(/* () */0);

var SocketClosed = Caml_exceptions.create("Bot-Record.SocketClosed");

var SocketError = Caml_exceptions.create("Bot-Record.SocketError");

function bot(settings) {
  return new Promise((function (resolve, reject) {
                var ws = new IsomorphicWs("wss://gateway.discord.gg/?v=6&encoding=json");
                ws.on("open", (function (param) {
                              console.log("Opened");
                              return resolve(/* record */Block.record([
                                            "settings",
                                            "ws"
                                          ], [
                                            settings,
                                            ws
                                          ]));
                            })).on("close", (function (code, reason) {
                            console.log("Closed: " + (String(code) + (" " + reason)));
                            return reject([
                                        SocketClosed,
                                        code,
                                        reason
                                      ]);
                          })).on("error", (function (error) {
                          console.log("Error: " + error.message);
                          return reject([
                                      SocketError,
                                      error
                                    ]);
                        })).on("message", (function (message) {
                        console.log(message);
                        var data = Data$Record.Decode[/* data */12](Json.parseOrRaise(message));
                        console.log(data);
                        var match = data[/* d */1];
                        if (typeof match === "number" || match.tag !== 9) {
                          return /* () */0;
                        } else {
                          setInterval((function (param) {
                                  ws.send(Json.stringify(Data$Record.Encode[/* dataFromPayload */15](/* Heartbeat */Block.variant("Heartbeat", 1, [undefined]))));
                                  return /* () */0;
                                }), match[0][/* heartbeatInterval */0]);
                          ws.send(Json.stringify(Data$Record.Encode[/* dataFromPayload */15](/* Identify */Block.variant("Identify", 2, [/* record */Block.record([
                                              "token",
                                              "properties",
                                              "compress",
                                              "largeThreshold",
                                              "shard",
                                              "presence"
                                            ], [
                                              settings[/* token */0],
                                              Block.record([
                                                  "os",
                                                  "browser",
                                                  "device"
                                                ], [
                                                  Process.platform,
                                                  "record",
                                                  "record"
                                                ]),
                                              0,
                                              0,
                                              0,
                                              0
                                            ])]))));
                          return /* () */0;
                        }
                      }));
                return /* () */0;
              }));
}

exports.SocketClosed = SocketClosed;
exports.SocketError = SocketError;
exports.bot = bot;
/*  Not a pure module */
