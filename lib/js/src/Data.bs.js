// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var $$Permissions = /* module */Block.localModule([], []);

var User = /* module */Block.localModule([], []);

var Presence = /* module */Block.localModule([], []);

var Channel = /* module */Block.localModule([], []);

var Emoji = /* module */Block.localModule([], []);

var NotImplemented = Caml_exceptions.create("Data-Record.NotImplemented");

function op_of_payload(payload) {
  if (typeof payload === "number") {
    if (payload === 0) {
      return 7;
    } else {
      return 11;
    }
  } else {
    switch (payload.tag | 0) {
      case 0 : 
          return 0;
      case 1 : 
          return 1;
      case 2 : 
          return 2;
      case 3 : 
          return 3;
      case 4 : 
          return 4;
      case 5 : 
          return 6;
      case 6 : 
      case 7 : 
          return 8;
      case 8 : 
          return 9;
      case 9 : 
          return 10;
      
    }
  }
}

function t_of_payload(payload) {
  if (typeof payload === "number" || payload.tag) {
    return /* Missing */0;
  } else {
    var tmp;
    tmp = payload[0].tag ? "GUILD_CREATE" : "READY";
    return /* Field */Block.simpleVariant("Field", [tmp]);
  }
}

function optionalField(decoder, json) {
  var match = Json_decode.optional(decoder, json);
  if (match !== undefined) {
    return /* Field */Block.simpleVariant("Field", [Caml_option.valFromOption(match)]);
  } else {
    return /* Missing */0;
  }
}

function role(json) {
  return /* record */Block.record([
            "id",
            "name",
            "color",
            "hoist",
            "position",
            "permissions",
            "managed",
            "mentionable"
          ], [
            Json_decode.field("id", Json_decode.string, json),
            Json_decode.field("name", Json_decode.string, json),
            Json_decode.field("color", Json_decode.$$int, json),
            Json_decode.field("hoist", Json_decode.bool, json),
            Json_decode.field("position", Json_decode.$$int, json),
            Json_decode.field("permissions", Json_decode.$$int, json),
            Json_decode.field("managed", Json_decode.bool, json),
            Json_decode.field("mentionable", Json_decode.bool, json)
          ]);
}

var $$Permissions$1 = /* module */Block.localModule(["role"], [role]);

function t(json) {
  return /* record */Block.record([
            "id",
            "username",
            "discriminator",
            "avatar",
            "bot",
            "mfaEnabled",
            "locale",
            "verified",
            "email",
            "flags",
            "premiumType"
          ], [
            Json_decode.field("id", Json_decode.string, json),
            Json_decode.field("username", Json_decode.string, json),
            Json_decode.field("discriminator", Json_decode.string, json),
            Json_decode.field("avatar", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("bot", (function (param) {
                    return optionalField(Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("mfa_enabled", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("locale", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("verified", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("email", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("flags", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("premium_type", Json_decode.$$int, param);
                  }), json)
          ]);
}

var User$1 = /* module */Block.localModule(["t"], [t]);

function timestamps(json) {
  return /* record */Block.record([
            "start",
            "end_"
          ], [
            optionalField((function (param) {
                    return Json_decode.field("start", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("end", Json_decode.$$int, param);
                  }), json)
          ]);
}

function party(json) {
  return /* record */Block.record([
            "id",
            "size"
          ], [
            optionalField((function (param) {
                    return Json_decode.field("id", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("size", (function (param) {
                                  return Json_decode.array(Json_decode.$$int, param);
                                }), param);
                  }), json)
          ]);
}

function assets(json) {
  return /* record */Block.record([
            "largeImage",
            "largeText",
            "smallImage",
            "smallText"
          ], [
            optionalField((function (param) {
                    return Json_decode.field("large_image", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("large_text", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("small_image", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("small_text", Json_decode.string, param);
                  }), json)
          ]);
}

function secrets(json) {
  return /* record */Block.record([
            "join",
            "spectate",
            "match"
          ], [
            optionalField((function (param) {
                    return Json_decode.field("join", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("spectate", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("match", Json_decode.string, param);
                  }), json)
          ]);
}

function activity(json) {
  return /* record */Block.record([
            "name",
            "type_",
            "url",
            "timestamps",
            "applicationId",
            "details",
            "state",
            "party",
            "assets",
            "secrets",
            "instance",
            "flags"
          ], [
            Json_decode.field("name", Json_decode.string, json),
            Json_decode.field("type", Json_decode.$$int, json),
            optionalField((function (param) {
                    return Json_decode.field("url", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("timestamps", timestamps, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("application_id", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("details", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("state", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("party", party, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("assets", assets, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("secrets", secrets, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("instance", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("flags", Json_decode.$$int, param);
                  }), json)
          ]);
}

function clientStatus(json) {
  return /* record */Block.record([
            "desktop",
            "mobile",
            "web"
          ], [
            optionalField((function (param) {
                    return Json_decode.field("desktop", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("mobile", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("web", Json_decode.string, param);
                  }), json)
          ]);
}

function update(json) {
  return /* record */Block.record([
            "user",
            "roles",
            "game",
            "guildId",
            "status",
            "activities",
            "clientStatus"
          ], [
            Json_decode.field("user", t, json),
            Json_decode.field("roles", (function (param) {
                    return Json_decode.array(Json_decode.string, param);
                  }), json),
            Json_decode.field("game", (function (param) {
                    return Json_decode.optional(activity, param);
                  }), json),
            Json_decode.field("guild_id", Json_decode.string, json),
            Json_decode.field("status", Json_decode.string, json),
            Json_decode.field("activities", (function (param) {
                    return Json_decode.array(activity, param);
                  }), json),
            Json_decode.field("client_status", clientStatus, json)
          ]);
}

var Presence$1 = /* module */Block.localModule([
    "timestamps",
    "party",
    "assets",
    "secrets",
    "activity",
    "clientStatus",
    "update"
  ], [
    timestamps,
    party,
    assets,
    secrets,
    activity,
    clientStatus,
    update
  ]);

function overwrite(json) {
  return /* record */Block.record([
            "id",
            "type_",
            "allow",
            "deny"
          ], [
            Json_decode.field("id", Json_decode.string, json),
            Json_decode.field("type", Json_decode.string, json),
            Json_decode.field("allow", Json_decode.$$int, json),
            Json_decode.field("deny", Json_decode.$$int, json)
          ]);
}

function t$1(json) {
  return /* record */Block.record([
            "id",
            "type_",
            "guildId",
            "position",
            "permissionOverwrites",
            "name",
            "topic",
            "nsfw",
            "lastMessageId",
            "bitrate",
            "userLimit",
            "rateLimitPerUser",
            "recipients",
            "icon",
            "ownerId",
            "applicationId",
            "parentId",
            "lastPinTimestamp"
          ], [
            Json_decode.field("id", Json_decode.string, json),
            Json_decode.field("type", Json_decode.$$int, json),
            optionalField((function (param) {
                    return Json_decode.field("guild_id", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("position", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("permission_overwrites", (function (param) {
                                  return Json_decode.array(overwrite, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("name", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("topic", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("nsfw", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("last_message_id", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("bitrate", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("user_limit", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("rate_limit_per_user", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("recipients", (function (param) {
                                  return Json_decode.array(t, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("icon", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("owner_id", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("application_id", Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("parent_id", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("last_pin_timestamp", Json_decode.date, param);
                  }), json)
          ]);
}

var Channel$1 = /* module */Block.localModule([
    "overwrite",
    "t"
  ], [
    overwrite,
    t$1
  ]);

function t$2(json) {
  return /* record */Block.record([
            "id",
            "name",
            "roles",
            "user",
            "requireColons",
            "managed",
            "animated"
          ], [
            Json_decode.field("id", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("name", Json_decode.string, json),
            optionalField((function (param) {
                    return Json_decode.field("roles", (function (param) {
                                  return Json_decode.array(Json_decode.string, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("user", t, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("require_colons", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("managed", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("animated", Json_decode.bool, param);
                  }), json)
          ]);
}

var Emoji$1 = /* module */Block.localModule(["t"], [t$2]);

var Voice_ = Caml_module.init_mod([
      "Data.re",
      544,
      62
    ], [[0]]);

var Guild_ = Caml_module.init_mod([
      "Data.re",
      560,
      6
    ], [[
        0,
        0,
        0,
        0
      ]]);

function state(json) {
  var partial_arg = Guild_[/* member */0];
  return /* record */Block.record([
            "guildId",
            "channelId",
            "userId",
            "member"
          ], [
            Json_decode.field("guild_id", Json_decode.string, json),
            Json_decode.field("channel_id", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("user_id", Json_decode.string, json),
            optionalField((function (param) {
                    return Json_decode.field("member", partial_arg, param);
                  }), json)
          ]);
}

Caml_module.update_mod([[0]], Voice_, /* module */Block.localModule(["state"], [state]));

function member(json) {
  return /* record */Block.record([
            "user",
            "nick",
            "roles",
            "joinedAt",
            "deaf",
            "mute"
          ], [
            Json_decode.field("user", t, json),
            optionalField((function (param) {
                    return Json_decode.field("nick", Json_decode.string, param);
                  }), json),
            Json_decode.field("roles", (function (param) {
                    return Json_decode.array(Json_decode.string, param);
                  }), json),
            Json_decode.field("joined_at", Json_decode.date, json),
            Json_decode.field("deaf", Json_decode.bool, json),
            Json_decode.field("mute", Json_decode.bool, json)
          ]);
}

function unavailable(json) {
  return /* record */Block.record([
            "id",
            "unavailable"
          ], [
            Json_decode.field("id", Json_decode.string, json),
            Json_decode.field("unavailable", Json_decode.bool, json)
          ]);
}

function t$3(json) {
  var partial_arg = Voice_[/* state */0];
  var partial_arg$1 = function (param) {
    return Json_decode.array(partial_arg, param);
  };
  return /* record */Block.record([
            "id",
            "name",
            "icon",
            "splash",
            "owner",
            "ownerId",
            "permissions",
            "region",
            "afkChannelId",
            "afkTimeout",
            "embedEnabled",
            "embedChannelId",
            "verificationLevel",
            "defaultMessageNotifications",
            "explicitContentFilter",
            "roles",
            "emojis",
            "features",
            "mfaLevel",
            "applicationId",
            "widgetEnabled",
            "widgetChannelId",
            "systemChannelId",
            "joinedAt",
            "large",
            "unavailable",
            "memberCount",
            "voiceStates",
            "members",
            "channels",
            "presences",
            "maxPresences",
            "maxMembers",
            "vanityUrlCode",
            "description",
            "banner"
          ], [
            Json_decode.field("id", Json_decode.string, json),
            Json_decode.field("name", Json_decode.string, json),
            Json_decode.field("icon", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("splash", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("owner", Json_decode.bool, param);
                  }), json),
            Json_decode.field("owner_id", Json_decode.string, json),
            optionalField((function (param) {
                    return Json_decode.field("permissions", Json_decode.$$int, param);
                  }), json),
            Json_decode.field("region", Json_decode.string, json),
            Json_decode.field("afk_channel_id", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("afk_timeout", Json_decode.$$int, json),
            optionalField((function (param) {
                    return Json_decode.field("embed_enabled", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("embed_channel_id", Json_decode.string, param);
                  }), json),
            Json_decode.field("verification_level", Json_decode.$$int, json),
            Json_decode.field("default_message_notifications", Json_decode.$$int, json),
            Json_decode.field("explicit_content_filter", Json_decode.$$int, json),
            Json_decode.field("roles", (function (param) {
                    return Json_decode.array(role, param);
                  }), json),
            Json_decode.field("emojis", (function (param) {
                    return Json_decode.array(t$2, param);
                  }), json),
            Json_decode.field("features", (function (param) {
                    return Json_decode.array(Json_decode.string, param);
                  }), json),
            Json_decode.field("mfa_level", Json_decode.$$int, json),
            Json_decode.field("application_id", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("widget_enabled", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("widget_channel_id", Json_decode.string, param);
                  }), json),
            Json_decode.field("system_channel_id", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("joined_at", Json_decode.date, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("large", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("unavailable", Json_decode.bool, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("member_count", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("voice_states", partial_arg$1, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("members", (function (param) {
                                  return Json_decode.array(member, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("channels", (function (param) {
                                  return Json_decode.array(t$1, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("presences", (function (param) {
                                  return Json_decode.array(update, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("max_presences", (function (param) {
                                  return Json_decode.optional(Json_decode.$$int, param);
                                }), param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("max_members", Json_decode.$$int, param);
                  }), json),
            Json_decode.field("vanity_url_code", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("description", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json),
            Json_decode.field("banner", (function (param) {
                    return Json_decode.optional(Json_decode.string, param);
                  }), json)
          ]);
}

Caml_module.update_mod([[
        0,
        0,
        0,
        0
      ]], Guild_, /* module */Block.localModule([
        "member",
        "unavailable",
        "t",
        "create"
      ], [
        member,
        unavailable,
        t$3,
        t$3
      ]));

function ready(json) {
  var partial_arg = Guild_[/* unavailable */1];
  return /* record */Block.record([
            "v",
            "user",
            "privateChannels",
            "guilds",
            "sessionId",
            "trace",
            "shard"
          ], [
            Json_decode.field("v", Json_decode.$$int, json),
            Json_decode.field("user", t, json),
            Json_decode.field("private_channels", (function (param) {
                    return Json_decode.array((function (param) {
                                  return /* () */0;
                                }), param);
                  }), json),
            Json_decode.field("guilds", (function (param) {
                    return Json_decode.array(partial_arg, param);
                  }), json),
            Json_decode.field("session_id", Json_decode.string, json),
            Json_decode.field("_trace", (function (param) {
                    return Json_decode.array(Json_decode.string, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("shard", (function (param) {
                                  return Json_decode.array(Json_decode.$$int, param);
                                }), param);
                  }), json)
          ]);
}

function hello(json) {
  return /* record */Block.record([
            "heartbeatInterval",
            "trace"
          ], [
            Json_decode.field("heartbeat_interval", Json_decode.$$int, json),
            Json_decode.field("_trace", (function (param) {
                    return Json_decode.array(Json_decode.string, param);
                  }), json)
          ]);
}

function data(json) {
  return /* record */Block.record([
            "op",
            "d",
            "s",
            "t"
          ], [
            Json_decode.field("op", Json_decode.$$int, json),
            Json_decode.field("d", (function (j) {
                    var match = Json_decode.field("op", Json_decode.$$int, json);
                    switch (match) {
                      case 0 : 
                          var match$1 = Json_decode.field("t", Json_decode.string, json);
                          var tmp;
                          switch (match$1) {
                            case "GUILD_CREATE" : 
                                tmp = /* GuildCreate */Block.variant("GuildCreate", 1, [Curry._1(Guild_[/* create */3], j)]);
                                break;
                            case "READY" : 
                                tmp = /* Ready */Block.variant("Ready", 0, [ready(j)]);
                                break;
                            default:
                              throw NotImplemented;
                          }
                          return /* Dispatch */Block.variant("Dispatch", 0, [tmp]);
                      case 7 : 
                          return /* Reconnect */0;
                      case 1 : 
                      case 2 : 
                      case 3 : 
                      case 4 : 
                      case 5 : 
                      case 6 : 
                      case 8 : 
                          throw NotImplemented;
                      case 9 : 
                          return /* InvalidSession */Block.variant("InvalidSession", 8, [Json_decode.bool(j)]);
                      case 10 : 
                          return /* Hello */Block.variant("Hello", 9, [hello(j)]);
                      case 11 : 
                          return /* Ack */1;
                      default:
                        throw NotImplemented;
                    }
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("s", Json_decode.$$int, param);
                  }), json),
            optionalField((function (param) {
                    return Json_decode.field("t", Json_decode.string, param);
                  }), json)
          ]);
}

var Decode = /* module */Block.localModule([
    "optionalField",
    "Permissions",
    "User",
    "Presence",
    "Channel",
    "Emoji",
    "Voice_",
    "Guild_",
    "Voice",
    "Guild",
    "ready",
    "hello",
    "data"
  ], [
    optionalField,
    $$Permissions$1,
    User$1,
    Presence$1,
    Channel$1,
    Emoji$1,
    Voice_,
    Guild_,
    0,
    0,
    ready,
    hello,
    data
  ]);

function required(encoder, r) {
  return /* Field */Block.simpleVariant("Field", [Curry._1(encoder, r)]);
}

function optional(encoder, r) {
  if (r) {
    return /* Field */Block.simpleVariant("Field", [Curry._1(encoder, r[0])]);
  } else {
    return /* Missing */0;
  }
}

function nullOpt(encoder, r) {
  if (r !== undefined) {
    return Curry._1(encoder, Caml_option.valFromOption(r));
  } else {
    return null;
  }
}

function objectOpt(fields) {
  return Json_encode.object_(List.fold_right((function (b, a) {
                    var match = b[1];
                    if (match) {
                      return /* :: */Block.simpleVariant("::", [
                                /* tuple */[
                                  b[0],
                                  match[0]
                                ],
                                a
                              ]);
                    } else {
                      return a;
                    }
                  }), fields, /* [] */0));
}

function timestamps$1(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "start",
                  optional((function (prim) {
                          return prim;
                        }), r[/* start */0])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "end",
                      optional((function (prim) {
                              return prim;
                            }), r[/* end_ */1])
                    ],
                    /* [] */0
                  ])
              ]));
}

function party$1(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "id",
                  optional((function (prim) {
                          return prim;
                        }), r[/* id */0])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "size",
                      optional((function (param) {
                              return Json_encode.array((function (prim) {
                                            return prim;
                                          }), param);
                            }), r[/* size */1])
                    ],
                    /* [] */0
                  ])
              ]));
}

function assets$1(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "large_image",
                  optional((function (prim) {
                          return prim;
                        }), r[/* largeImage */0])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "large_text",
                      optional((function (prim) {
                              return prim;
                            }), r[/* largeText */1])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "small_image",
                          optional((function (prim) {
                                  return prim;
                                }), r[/* smallImage */2])
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "small_text",
                              optional((function (prim) {
                                      return prim;
                                    }), r[/* smallText */3])
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function secrets$1(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "join",
                  optional((function (prim) {
                          return prim;
                        }), r[/* join */0])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "spectate",
                      optional((function (prim) {
                              return prim;
                            }), r[/* spectate */1])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "match",
                          optional((function (prim) {
                                  return prim;
                                }), r[/* match */2])
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function activity$1(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "name",
                  /* Field */Block.simpleVariant("Field", [r[/* name */0]])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "type",
                      /* Field */Block.simpleVariant("Field", [r[/* type_ */1]])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "url",
                          optional((function (param) {
                                  return nullOpt((function (prim) {
                                                return prim;
                                              }), param);
                                }), r[/* url */2])
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "timestamps",
                              optional(timestamps$1, r[/* timestamps */3])
                            ],
                            /* :: */Block.simpleVariant("::", [
                                /* tuple */[
                                  "application_id",
                                  optional((function (prim) {
                                          return prim;
                                        }), r[/* applicationId */4])
                                ],
                                /* :: */Block.simpleVariant("::", [
                                    /* tuple */[
                                      "details",
                                      optional((function (param) {
                                              return nullOpt((function (prim) {
                                                            return prim;
                                                          }), param);
                                            }), r[/* details */5])
                                    ],
                                    /* :: */Block.simpleVariant("::", [
                                        /* tuple */[
                                          "state",
                                          optional((function (param) {
                                                  return nullOpt((function (prim) {
                                                                return prim;
                                                              }), param);
                                                }), r[/* state */6])
                                        ],
                                        /* :: */Block.simpleVariant("::", [
                                            /* tuple */[
                                              "party",
                                              optional(party$1, r[/* party */7])
                                            ],
                                            /* :: */Block.simpleVariant("::", [
                                                /* tuple */[
                                                  "assets",
                                                  optional(assets$1, r[/* assets */8])
                                                ],
                                                /* :: */Block.simpleVariant("::", [
                                                    /* tuple */[
                                                      "secrets",
                                                      optional(secrets$1, r[/* secrets */9])
                                                    ],
                                                    /* :: */Block.simpleVariant("::", [
                                                        /* tuple */[
                                                          "instance",
                                                          optional((function (prim) {
                                                                  return prim;
                                                                }), r[/* instance */10])
                                                        ],
                                                        /* :: */Block.simpleVariant("::", [
                                                            /* tuple */[
                                                              "flags",
                                                              optional((function (prim) {
                                                                      return prim;
                                                                    }), r[/* flags */11])
                                                            ],
                                                            /* [] */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ])
              ]));
}

var Presence$2 = /* module */Block.localModule([
    "timestamps",
    "party",
    "assets",
    "secrets",
    "activity"
  ], [
    timestamps$1,
    party$1,
    assets$1,
    secrets$1,
    activity$1
  ]);

function updateStatus(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "since",
                  /* Field */Block.simpleVariant("Field", [nullOpt((function (prim) {
                              return prim;
                            }), r[/* since */0])])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "game",
                      /* Field */Block.simpleVariant("Field", [nullOpt(activity$1, r[/* game */1])])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "status",
                          /* Field */Block.simpleVariant("Field", [r[/* status */2]])
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "afk",
                              /* Field */Block.simpleVariant("Field", [r[/* afk */3]])
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function heartbeat(param) {
  return nullOpt((function (prim) {
                return prim;
              }), param);
}

function props(r) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "$os",
                  r[/* os */0]
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "$browser",
                      r[/* browser */1]
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "$device",
                          r[/* device */2]
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function identify(r) {
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "token",
                  /* Field */Block.simpleVariant("Field", [r[/* token */0]])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "properties",
                      /* Field */Block.simpleVariant("Field", [props(r[/* properties */1])])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "compress",
                          optional((function (prim) {
                                  return prim;
                                }), r[/* compress */2])
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "large_threshold",
                              optional((function (prim) {
                                      return prim;
                                    }), r[/* largeThreshold */3])
                            ],
                            /* :: */Block.simpleVariant("::", [
                                /* tuple */[
                                  "shard",
                                  optional((function (param) {
                                          return Json_encode.array((function (prim) {
                                                        return prim;
                                                      }), param);
                                        }), r[/* shard */4])
                                ],
                                /* :: */Block.simpleVariant("::", [
                                    /* tuple */[
                                      "presence",
                                      optional(updateStatus, r[/* presence */5])
                                    ],
                                    /* [] */0
                                  ])
                              ])
                          ])
                      ])
                  ])
              ]));
}

function statusUpdate(r) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "since",
                  nullOpt((function (prim) {
                          return prim;
                        }), r[/* since */0])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "game",
                      nullOpt(activity$1, r[/* game */1])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "status",
                          r[/* status */2]
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "afk",
                              r[/* afk */3]
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function voiceStateUpdate(r) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "guild_id",
                  r[/* guildId */0]
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "channel_id",
                      nullOpt((function (prim) {
                              return prim;
                            }), r[/* channelId */1])
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "self_mute",
                          r[/* selfMute */2]
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "self_deaf",
                              r[/* selfDeaf */3]
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function resume(r) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "token",
                  r[/* token */0]
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "session_id",
                      r[/* sessionId */1]
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "seq",
                          r[/* seq */2]
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function requestGuildMembers(r) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "guild_id",
                  r[/* guildId */0]
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "query",
                      r[/* query */1]
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "limit",
                          r[/* limit */2]
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function requestGuildMembersArr(r) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "guild_id",
                  Json_encode.array((function (prim) {
                          return prim;
                        }), r[/* guildId */0])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "query",
                      r[/* query */1]
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "limit",
                          r[/* limit */2]
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function data$1(r) {
  var match = r[/* d */1];
  var tmp;
  if (typeof match === "number") {
    tmp = /* Missing */0;
  } else {
    switch (match.tag | 0) {
      case 1 : 
          tmp = /* Field */Block.simpleVariant("Field", [nullOpt((function (prim) {
                      return prim;
                    }), match[0])]);
          break;
      case 2 : 
          tmp = /* Field */Block.simpleVariant("Field", [identify(match[0])]);
          break;
      case 3 : 
          tmp = /* Field */Block.simpleVariant("Field", [statusUpdate(match[0])]);
          break;
      case 4 : 
          tmp = /* Field */Block.simpleVariant("Field", [voiceStateUpdate(match[0])]);
          break;
      case 5 : 
          tmp = /* Field */Block.simpleVariant("Field", [resume(match[0])]);
          break;
      case 6 : 
          tmp = /* Field */Block.simpleVariant("Field", [requestGuildMembers(match[0])]);
          break;
      case 7 : 
          tmp = /* Field */Block.simpleVariant("Field", [requestGuildMembersArr(match[0])]);
          break;
      default:
        tmp = /* Missing */0;
    }
  }
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "op",
                  /* Field */Block.simpleVariant("Field", [r[/* op */0]])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "d",
                      tmp
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "s",
                          optional((function (prim) {
                                  return prim;
                                }), r[/* s */2])
                        ],
                        /* :: */Block.simpleVariant("::", [
                            /* tuple */[
                              "t",
                              optional((function (prim) {
                                      return prim;
                                    }), r[/* t */3])
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function dataFromPayload(r) {
  var r$1 = op_of_payload(r);
  var tmp;
  if (typeof r === "number") {
    tmp = /* Missing */0;
  } else {
    switch (r.tag | 0) {
      case 1 : 
          tmp = /* Field */Block.simpleVariant("Field", [nullOpt((function (prim) {
                      return prim;
                    }), r[0])]);
          break;
      case 2 : 
          tmp = /* Field */Block.simpleVariant("Field", [identify(r[0])]);
          break;
      case 3 : 
          tmp = /* Field */Block.simpleVariant("Field", [statusUpdate(r[0])]);
          break;
      case 4 : 
          tmp = /* Field */Block.simpleVariant("Field", [voiceStateUpdate(r[0])]);
          break;
      case 5 : 
          tmp = /* Field */Block.simpleVariant("Field", [resume(r[0])]);
          break;
      case 6 : 
          tmp = /* Field */Block.simpleVariant("Field", [requestGuildMembers(r[0])]);
          break;
      case 7 : 
          tmp = /* Field */Block.simpleVariant("Field", [requestGuildMembersArr(r[0])]);
          break;
      default:
        tmp = /* Missing */0;
    }
  }
  return objectOpt(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "op",
                  /* Field */Block.simpleVariant("Field", [r$1])
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "d",
                      tmp
                    ],
                    /* :: */Block.simpleVariant("::", [
                        /* tuple */[
                          "t",
                          optional((function (prim) {
                                  return prim;
                                }), t_of_payload(r))
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

var Encode = /* module */Block.localModule([
    "required",
    "optional",
    "nullOpt",
    "objectOpt",
    "Presence",
    "updateStatus",
    "heartbeat",
    "props",
    "identify",
    "statusUpdate",
    "voiceStateUpdate",
    "resume",
    "requestGuildMembers",
    "requestGuildMembersArr",
    "data",
    "dataFromPayload"
  ], [
    required,
    optional,
    nullOpt,
    objectOpt,
    Presence$2,
    updateStatus,
    heartbeat,
    props,
    identify,
    statusUpdate,
    voiceStateUpdate,
    resume,
    requestGuildMembers,
    requestGuildMembersArr,
    data$1,
    dataFromPayload
  ]);

var Voice = /* () */0;

var Guild = /* () */0;

exports.$$Permissions = $$Permissions;
exports.User = User;
exports.Presence = Presence;
exports.Channel = Channel;
exports.Emoji = Emoji;
exports.Voice = Voice;
exports.Guild = Guild;
exports.NotImplemented = NotImplemented;
exports.op_of_payload = op_of_payload;
exports.t_of_payload = t_of_payload;
exports.Decode = Decode;
exports.Encode = Encode;
/* Voice_ Not a pure module */
